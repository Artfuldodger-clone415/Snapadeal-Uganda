================================================================================
                            SNAPADEAL PROJECT DOCUMENTATION
================================================================================

PROJECT OVERVIEW
================================================================================
Snapadeal is a comprehensive deals and discounts platform for Uganda, similar to 
Groupon. It connects customers with local businesses offering discounted deals on 
restaurants, beauty services, entertainment, and more.

The platform consists of three main applications:
1. Customer App - Browse and purchase deals
2. Merchant App - Create and manage deals  
3. Admin App - Approve deals and manage platform

ARCHITECTURE
================================================================================
- Backend: Go REST API with JWT authentication
- Frontend: React TypeScript applications
- Database: SQLite (development) / PostgreSQL (production)
- Payments: Flutterwave integration for Mobile Money
- Authentication: Role-based access control (Customer/Merchant/Admin)

PROJECT STRUCTURE
================================================================================
snapadeal/
├── backend/                    # Go API Server
│   ├── main.go                # Application entry point
│   ├── config/
│   │   └── database.go        # Database configuration
│   ├── models/
│   │   ├── user.go           # User model and authentication
│   │   ├── deal.go           # Deal model and business logic
│   │   ├── category.go       # Category model
│   │   ├── transaction.go    # Transaction and payment model
│   │   └── seed.go           # Database seeding
│   ├── handlers/
│   │   ├── auth.go           # Authentication endpoints
│   │   ├── deals.go          # Deal management endpoints
│   │   ├── transactions.go   # Payment processing
│   │   └── categories.go     # Category endpoints
│   ├── middleware/
│   │   └── auth.go           # JWT and role-based middleware
│   ├── go.mod                # Go dependencies
│   ├── .env                  # Environment variables
│   └── snapadeal.db          # SQLite database (auto-created)
│
├── customer-app/              # Customer-facing web application (Port 3000)
│   ├── src/
│   │   ├── components/
│   │   │   ├── Navbar.tsx    # Navigation component
│   │   │   ├── Footer.tsx    # Footer component
│   │   │   ├── DealCard.tsx  # Deal display component
│   │   │   └── ProtectedRoute.tsx # Route protection
│   │   ├── pages/
│   │   │   ├── Home.tsx      # Landing page with featured deals
│   │   │   ├── Login.tsx     # Customer login
│   │   │   ├── Register.tsx  # Customer registration
│   │   │   ├── Deals.tsx     # Browse all deals
│   │   │   ├── DealDetail.tsx # Individual deal page
│   │   │   ├── Profile.tsx   # User profile management
│   │   │   └── Transactions.tsx # Order history
│   │   ├── contexts/
│   │   │   └── AuthContext.tsx # Authentication state
│   │   ├── services/
│   │   │   └── api.ts        # API service layer
│   │   ├── App.tsx           # Main app component
│   │   └── App.css           # Groupon-inspired styling
│   ├── package.json          # Dependencies
│   └── .env                  # Environment variables
│
├── merchant-app/             # Merchant portal (Port 3001)
│   ├── src/
│   │   ├── components/
│   │   │   ├── Sidebar.tsx   # Navigation sidebar
│   │   │   ├── Navbar.tsx    # Top navigation
│   │   │   └── ProtectedRoute.tsx # Merchant route protection
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx # Merchant dashboard with stats
│   │   │   ├── Login.tsx     # Merchant login
│   │   │   ├── Register.tsx  # Merchant registration
│   │   │   ├── Deals.tsx     # Manage deals
│   │   │   ├── CreateDeal.tsx # Create new deal
│   │   │   ├── EditDeal.tsx  # Edit existing deal
│   │   │   └── Profile.tsx   # Merchant profile
│   │   ├── contexts/
│   │   │   └── AuthContext.tsx # Merchant authentication
│   │   ├── services/
│   │   │   └── api.ts        # API services
│   │   └── App.tsx           # Main merchant app
│   └── package.json          # Dependencies
│
├── admin-app/               # Admin dashboard (Port 3002)
│   ├── src/
│   │   ├── components/
│   │   │   ├── Sidebar.tsx   # Admin navigation
│   │   │   ├── Navbar.tsx    # Admin top bar
│   │   │   └── ProtectedRoute.tsx # Admin route protection
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx # Admin overview
│   │   │   ├── Login.tsx     # Admin login
│   │   │   ├── PendingDeals.tsx # Deal approval queue
│   │   │   ├── AllDeals.tsx  # All deals management
│   │   │   ├── Users.tsx     # Customer management
│   │   │   ├── Merchants.tsx # Merchant management
│   │   │   ├── Analytics.tsx # Platform analytics
│   │   │   └── Settings.tsx  # System settings
│   │   ├── contexts/
│   │   │   └── AuthContext.tsx # Admin authentication
│   │   └── services/
│   │       └── api.ts        # Admin API services
│   └── package.json          # Dependencies
│
├── scripts/                # Database scripts and utilities
│   └── seed-categories.sql # Initial category data
├── setup-complete.sh       # Complete setup script
├── start-snapadeal.sh      # Start all applications
└── PROJECT_DOCUMENTATION.txt # This documentation file

TECHNOLOGY STACK
================================================================================

Backend (Go)
- Framework: Gin (HTTP web framework)
- Database: GORM (ORM) with SQLite/PostgreSQL support
- Authentication: JWT tokens with role-based access
- Payment: Flutterwave integration for Mobile Money
- CORS: Enabled for all frontend applications
- Validation: Built-in request validation
- Middleware: Authentication and authorization

Frontend (React/TypeScript)
- Framework: React 18 with TypeScript
- Routing: React Router v6 for navigation
- State Management: React Context API
- HTTP Client: Axios with interceptors
- Notifications: React Hot Toast
- Icons: Lucide React icon library
- Styling: Custom CSS with Groupon-inspired design
- Build Tool: Create React App

Database
- Development: SQLite (file-based, no setup required)
- Production: PostgreSQL support included
- ORM: GORM with auto-migrations
- Seeding: Automatic category and admin user creation

IMPLEMENTED FEATURES
================================================================================

1. USER MANAGEMENT
- Customer Registration/Login with email/password
- Merchant Registration/Login with business details
- Admin Authentication with system access
- Role-based Access Control (Customer, Merchant, Admin)
- Profile Management with editable information
- Password hashing with bcrypt
- JWT token-based authentication
- Session management and logout

2. DEAL MANAGEMENT
- Deal Creation by merchants with:
  * Title, description, short description
  * Original price, discount price, automatic percentage calculation
  * Category selection from predefined list
  * Location and terms & conditions
  * Start/end dates with validation
  * Maximum quantity and sold quantity tracking
  * Image URL support
- Deal Approval Workflow requiring admin approval
- Deal Status Management (Pending, Approved, Rejected)
- Deal Search & Filtering by category, location, keywords
- Deal Expiration and availability checking
- Deal editing with re-approval requirement

3. PAYMENT INTEGRATION
- Flutterwave Integration for secure payments
- MTN Mobile Money support
- Airtel Money support
- Transaction Creation and tracking
- Payment Verification with webhooks
- Order History and transaction status
- Quantity-based pricing calculation
- Payment method selection

4. ADMIN FEATURES
- Comprehensive Dashboard with system statistics
- Deal Approval Queue with preview functionality
- User Management for customers and merchants
- Deal Management across all merchants
- User Status Management (Active, Inactive, Suspended)
- System Settings and configuration
- Analytics placeholder for future implementation
- Bulk operations support

5. MERCHANT FEATURES
- Business Dashboard with performance metrics
- Deal Management (Create, Read, Update, Delete)
- Deal Performance Analytics and sales tracking
- Profile Management with business information
- Deal Status Monitoring
- Revenue tracking and statistics
- Quick actions and shortcuts

6. CUSTOMER FEATURES
- Browse Deals with search and filtering
- Deal Details with comprehensive information
- Secure Purchase Flow with payment processing
- Order History and transaction tracking
- User Profile management
- Category-based browsing
- Location-based deal discovery
- Deal sharing and recommendations

DATABASE SCHEMA
================================================================================

Users Table
- id (Primary Key, Auto Increment)
- first_name (String, Required)
- last_name (String, Required)
- email (String, Unique, Required)
- phone (String, Unique, Required)
- password (String, Hashed, Required)
- role (String, Default: 'customer') - customer, merchant, admin
- status (String, Default: 'active') - active, inactive, suspended
- is_verified (Boolean, Default: false)
- created_at (Timestamp)
- updated_at (Timestamp)
- deleted_at (Timestamp, Soft Delete)

Deals Table
- id (Primary Key, Auto Increment)
- title (String, Required)
- description (Text, Required)
- short_description (String)
- original_price (Float, Required)
- discount_price (Float, Required)
- discount_percent (Integer, Auto-calculated)
- image_url (String)
- images (JSON Array)
- category_id (Foreign Key to Categories)
- merchant_id (Foreign Key to Users)
- status (String, Default: 'pending') - pending, approved, rejected, expired
- start_date (Timestamp, Required)
- end_date (Timestamp, Required)
- max_quantity (Integer, Default: 100)
- sold_quantity (Integer, Default: 0)
- location (String, Required)
- terms (Text)
- is_active (Boolean, Default: true)
- created_at (Timestamp)
- updated_at (Timestamp)
- deleted_at (Timestamp, Soft Delete)

Categories Table
- id (Primary Key, Auto Increment)
- name (String, Unique, Required)
- description (String)
- icon_url (String) - Emoji or icon representation
- is_active (Boolean, Default: true)
- created_at (Timestamp)
- updated_at (Timestamp)
- deleted_at (Timestamp, Soft Delete)

Transactions Table
- id (Primary Key, Auto Increment)
- user_id (Foreign Key to Users)
- deal_id (Foreign Key to Deals)
- quantity (Integer, Default: 1)
- amount (Float, Required)
- payment_method (String) - mtn_money, airtel_money
- payment_reference (String)
- flutterwave_ref (String)
- status (String, Default: 'pending') - pending, completed, failed, cancelled
- phone_number (String, Required)
- created_at (Timestamp)
- updated_at (Timestamp)
- deleted_at (Timestamp, Soft Delete)

API ENDPOINTS
================================================================================

Authentication Endpoints
- POST /api/v1/auth/register
  Body: {first_name, last_name, email, phone, password, role}
  Response: {user, token, message}

- POST /api/v1/auth/login
  Body: {email, password}
  Response: {user, token, message}

- POST /api/v1/auth/forgot-password
  Body: {email}
  Response: {message}

User Management
- GET /api/v1/users/profile (Protected)
  Headers: Authorization: Bearer <token>
  Response: {user}

- PUT /api/v1/users/profile (Protected)
  Body: {first_name, last_name, phone}
  Response: {user, message}

Deal Management (Public)
- GET /api/v1/deals
  Query: ?page=1&limit=20&category_id=1&location=kampala
  Response: {deals}

- GET /api/v1/deals/:id
  Response: {deal}

- GET /api/v1/deals/search
  Query: ?q=restaurant
  Response: {deals}

Deal Management (Protected - Merchant)
- POST /api/v1/deals (Merchant Only)
  Body: {title, description, original_price, discount_price, category_id, start_date, end_date, max_quantity, location, terms, image_url}
  Response: {deal, message}

- PUT /api/v1/deals/:id (Merchant Only)
  Body: {deal_data}
  Response: {deal, message}

- DELETE /api/v1/deals/:id (Merchant Only)
  Response: {message}

Admin Endpoints (Admin Only)
- GET /api/v1/admin/deals/pending
  Response: {deals}

- PUT /api/v1/admin/deals/:id/approve
  Response: {deal, message}

- PUT /api/v1/admin/deals/:id/reject
  Body: {reason}
  Response: {deal, message}

- GET /api/v1/admin/users
  Query: ?role=customer&page=1&limit=20
  Response: {users}

- PUT /api/v1/admin/users/:id/status
  Body: {status}
  Response: {user, message}

Transaction Endpoints (Protected)
- POST /api/v1/transactions
  Body: {deal_id, quantity, payment_method, phone_number}
  Response: {transaction, payment_url, flutterwave_ref}

- GET /api/v1/transactions
  Response: {transactions}

- POST /api/v1/transactions/verify-payment
  Body: {transaction_id, flutterwave_ref}
  Response: {transaction, message}

Category Endpoints
- GET /api/v1/categories
  Response: {categories}

SETUP INSTRUCTIONS
================================================================================

Prerequisites
- Go 1.21 or higher
- Node.js 16 or higher
- npm or yarn package manager
- Git for version control

Quick Start (Recommended)
1. Clone the repository to your local machine
2. Navigate to the project root directory
3. Make setup script executable: chmod +x setup-complete.sh
4. Run setup script: ./setup-complete.sh
5. Start all applications: ./start-snapadeal.sh

Manual Setup (Alternative)
1. Backend Setup:
   cd backend
   go mod tidy
   go run main.go

2. Customer App Setup:
   cd customer-app
   npm install
   npm start

3. Merchant App Setup:
   cd merchant-app
   npm install
   PORT=3001 npm start

4. Admin App Setup:
   cd admin-app
   npm install
   PORT=3002 npm start

Application URLs
- Customer Portal: http://localhost:3000
- Merchant Portal: http://localhost:3001
- Admin Portal: http://localhost:3002
- Backend API: http://localhost:8080
- Health Check: http://localhost:8080/health

Default Admin Account
- Email: admin@snapadeal.com
- Password: admin123
- Role: admin
- Status: active

ENVIRONMENT CONFIGURATION
================================================================================

Backend Environment (.env)
DATABASE_URL=                    # Leave empty for SQLite, add PostgreSQL URL for production
JWT_SECRET=snapadeal-super-secret-jwt-key-for-uganda-2024-make-it-very-long-and-secure
FLUTTERWAVE_PUBLIC_KEY=FLWPUBK_TEST-your-public-key-here
FLUTTERWAVE_SECRET_KEY=FLWSECK_TEST-your-secret-key-here
PORT=8080
GIN_MODE=debug

Customer App Environment (.env)
REACT_APP_API_URL=http://localhost:8080/api/v1
REACT_APP_APP_NAME=Snapadeal Customer App

Merchant App Environment (.env)
REACT_APP_API_URL=http://localhost:8080/api/v1
REACT_APP_APP_NAME=Snapadeal Merchant Portal

Admin App Environment (.env)
REACT_APP_API_URL=http://localhost:8080/api/v1
REACT_APP_APP_NAME=Snapadeal Admin Portal

CURRENT STATUS
================================================================================

✅ COMPLETED FEATURES
- Complete user authentication system with JWT
- Role-based access control (Customer/Merchant/Admin)
- Deal creation and management workflow
- Admin approval system for deals
- Payment integration with Flutterwave
- Mobile Money support (MTN and Airtel)
- Responsive UI design with Groupon-inspired styling
- Database schema with proper relationships
- API documentation and error handling
- Setup and deployment scripts
- Transaction management and order history
- Search and filtering functionality
- Category management system
- Profile management for all user types

🚧 PENDING/TODO FEATURES
- Email notifications for deal approvals
- File upload system for deal images
- Advanced analytics dashboard with charts
- Mobile app development (React Native)
- Production deployment configuration
- Performance optimization and caching
- Comprehensive unit and integration testing
- API rate limiting and security enhancements
- Backup and recovery procedures
- Monitoring and logging system

DEVELOPMENT WORKFLOW
================================================================================

Adding New Features
1. Backend Development:
   - Add/modify models in models/ directory
   - Create/update handlers in handlers/ directory
   - Add routes in main.go
   - Update database migrations if needed

2. Frontend Development:
   - Create components in components/ directory
   - Add pages in pages/ directory
   - Update services in services/ directory
   - Add routing in App.tsx

3. Testing:
   - Test API endpoints using tools like Postman
   - Test UI functionality in browser
   - Verify authentication and authorization
   - Test payment flow with test credentials

4. Documentation:
   - Update this documentation file
   - Add code comments for complex logic
   - Update API documentation

Code Structure Guidelines
- Use TypeScript for all React components
- Follow REST API conventions for backend
- Implement proper error handling everywhere
- Use React Context for state management
- Follow Go best practices and conventions
- Maintain consistent naming conventions
- Add proper validation for all inputs

Git Workflow
- Create feature branches for new development
- Use descriptive commit messages
- Test thoroughly before merging
- Keep main branch stable and deployable

DEPLOYMENT CONSIDERATIONS
================================================================================

Production Setup Requirements
- Use PostgreSQL instead of SQLite for better performance
- Configure proper JWT secrets (long, random strings)
- Set up SSL certificates for HTTPS
- Configure production Flutterwave keys
- Set up email service (SMTP configuration)
- Configure file storage (AWS S3, Cloudinary, etc.)
- Set up domain names and DNS
- Configure reverse proxy (Nginx)

Environment Variables for Production
- DATABASE_URL: PostgreSQL connection string
- JWT_SECRET: Strong, unique secret key
- FLUTTERWAVE_PUBLIC_KEY: Production public key
- FLUTTERWAVE_SECRET_KEY: Production secret key
- SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS: Email configuration
- FRONTEND_URL: Production frontend URL for CORS

Scaling Considerations
- Database indexing for better query performance
- API rate limiting to prevent abuse
- CDN for static assets and images
- Load balancing for multiple server instances
- Caching layer (Redis) for frequently accessed data
- Database connection pooling
- Horizontal scaling with container orchestration

Security Considerations
- Input validation and sanitization
- SQL injection prevention (GORM handles this)
- XSS protection in frontend
- CSRF protection for state-changing operations
- Secure password hashing (bcrypt)
- JWT token expiration and refresh
- HTTPS enforcement
- Environment variable security

TROUBLESHOOTING
================================================================================

Common Issues and Solutions

1. Port Conflicts
   Problem: "Port already in use" errors
   Solution: Check if ports 3000, 3001, 3002, 8080 are available
   Commands: 
   - lsof -i :3000 (check port usage)
   - kill -9 <PID> (kill process using port)

2. Database Connection Issues
   Problem: "Failed to connect to database"
   Solution: 
   - Ensure SQLite file has proper permissions
   - Check if backend directory is writable
   - Verify DATABASE_URL format for PostgreSQL

3. CORS Errors
   Problem: "CORS policy" errors in browser console
   Solution: 
   - Verify REACT_APP_API_URL in frontend .env files
   - Check backend CORS configuration in main.go
   - Ensure backend is running before frontend

4. Authentication Issues
   Problem: "Invalid token" or "Unauthorized" errors
   Solution:
   - Check JWT_SECRET configuration
   - Verify token storage in localStorage
   - Check token expiration (7 days default)
   - Clear browser localStorage and re-login

5. Payment Integration Issues
   Problem: Payment failures or webhook errors
   Solution:
   - Verify Flutterwave API keys
   - Check test vs production environment
   - Validate phone number format
   - Check network connectivity

6. Build/Compilation Errors
   Problem: npm or Go build failures
   Solution:
   - Clear node_modules and reinstall: rm -rf node_modules && npm install
   - Update Go modules: go mod tidy
   - Check Node.js and Go versions
   - Verify all dependencies are installed

Logs and Debugging
- Backend Logs: Console output from Go application (go run main.go)
- Frontend Logs: Browser developer console (F12)
- Database: SQLite file located at backend/snapadeal.db
- Network Requests: Browser Network tab for API calls
- Error Tracking: Check browser console and backend terminal

Development Tools
- Backend API Testing: Postman, curl, or Thunder Client
- Database Inspection: SQLite Browser, TablePlus, or DBeaver
- Code Editor: VS Code with Go and TypeScript extensions
- Version Control: Git with proper .gitignore files

TESTING PROCEDURES
================================================================================

Manual Testing Checklist

Authentication Testing
□ Customer registration with valid data
□ Customer login with correct credentials
□ Merchant registration and login
□ Admin login with default credentials
□ Invalid login attempts (wrong password, non-existent email)
□ Token expiration and refresh
□ Logout functionality

Deal Management Testing
□ Merchant can create deals with all required fields
□ Deal validation (end date after start date, discount < original price)
□ Admin can view pending deals
□ Admin can approve deals
□ Admin can reject deals with reason
□ Customers can view approved deals
□ Deal search and filtering works
□ Deal detail page displays correctly

Payment Testing
□ Customer can initiate purchase
□ Payment method selection works
□ Flutterwave integration redirects correctly
□ Payment verification works
□ Transaction history displays correctly
□ Failed payment handling

User Management Testing
□ Profile updates work for all user types
□ Admin can manage user status
□ Role-based access control works
□ Protected routes redirect unauthorized users

API Testing
□ All endpoints return correct status codes
□ Request validation works properly
□ Error responses are properly formatted
□ Authentication middleware works
□ CORS headers are present

CONTACT & SUPPORT
================================================================================

For questions or issues with this project:

1. Check the troubleshooting section above
2. Review the API documentation and endpoints
3. Examine the code comments and structure
4. Test with the default admin account
5. Check browser console and backend logs

Development Resources:
- Go Documentation: https://golang.org/doc/
- React Documentation: https://reactjs.org/docs/
- GORM Documentation: https://gorm.io/docs/
- Gin Documentation: https://gin-gonic.com/docs/
- Flutterwave API: https://developer.flutterwave.com/docs

NEXT STEPS FOR NEW DEVELOPER
================================================================================

1. Environment Setup (Day 1)
   - Set up development environment
   - Run the application using setup scripts
   - Familiarize with project structure
   - Test all major features manually

2. Code Understanding (Days 2-3)
   - Study the backend models and API structure
   - Understand the React component hierarchy
   - Review authentication and authorization flow
   - Examine the database schema and relationships

3. Feature Development (Week 1+)
   - Pick a feature from the TODO list
   - Start with smaller features like email notifications
   - Follow the development workflow outlined above
   - Test thoroughly before implementation

4. Documentation Updates
   - Keep this documentation current with changes
   - Add code comments for complex logic
   - Update API documentation for new endpoints
   - Document any new setup or deployment procedures

Priority Features to Implement Next:
1. Email notification system
2. File upload for deal images
3. Advanced analytics with charts
4. Mobile app development
5. Production deployment setup

This documentation provides a comprehensive overview of the Snapadeal project. 
The codebase is well-structured, fully functional, and ready for continued 
development. All core features are implemented and working, with a solid 
foundation for scaling and adding new features.

Last Updated: December 2024
Version: 1.0.0
Status: Production Ready (Development Environment)
